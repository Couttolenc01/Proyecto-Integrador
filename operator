// =========================================================
// File: operator.h
// Author:
// Date:
// Description:
// =========================================================

#ifndef OPERATOR_H
#define OPERATOR_H

#include <string>
#include <sstream>
#include <iomanip>

typedef enum{VOX, INTERNET} OperatorType;

class Operator {
protected:
  int id, discountRate;
  double talkingCharge, messageCost, networkCharge, totalInternetUsage;
  int totalSpentTalkingTime, totalMessageSent;
  OperatorType type;

public:
  Operetor();
  Operator(int, double, double, double, int, OperatorType);
  Operator(const Operator&);

  int getId() const;
  int getDiscountRate() const;
  double getTalkingChage() const;
  double getMessageCost() const;
  double getNetworkCharge() const;
  int getTotalSpentTalkingTime() const;
  int getTotalMessageSent() const;
  double getTotalInternetUsage() const;
  OperatorType getType() const;

  void addTalkingTime(int);
  void addTotalMessageSent(int);
  void addTotalInternetUsage(double);


  std::string toString() const;

  virtual double calculateTalkingCost(int, int) = 0;
  virtual double calculateMessageCost(int, int, int) = 0;
  virtual double calculateNetworkCost(double) = 0;
};
Operator::Operator(int ide, double talkChar, double messCst, double netChar, int disR, OperatorType type){
  id = ide;
  discountRate = disR;
  talkingCharge = talkChar;
  messageCost = messCst;
  networkCharge = netChar;
  totalInternetUsage = 0;
  totalSpentTalkingTime = 0;
  totalMessageSent = 0;
  type = typ;
}
int Operator::getId()const{
  return id;
}
int Operetator::getDiscountRate()const{
  return discountRate;
}
double Operetator::getTalkingCharge()const{
  return talkingCharge;
}
double Operator::getMessageCost()const{
  return messageCost;
}
double Operator::getNetworkCharge()const{
  return networkChange;
}
int Operator::getTotalSpentTalkingTime()const{
  return totalSpentTalkingTime;
}
int Operator::getTotalMessageSent()const{
  return totalMessageSent;
}
double Operator::getTotalInternetUsage()const{
  return totalInternetUsage;
}
OperatorType Operator::getType()const{
  return type;
}
#endif
